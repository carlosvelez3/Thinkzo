-- Create the contact_messages table
CREATE TABLE IF NOT EXISTS public.contact_messages (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    email text NOT NULL,
    company text,
    service_type text,
    budget_range text,
    message text NOT NULL,
    metadata jsonb,
    CONSTRAINT contact_messages_pkey PRIMARY KEY (id)
);

-- Enable Row-Level Security for the table
ALTER TABLE public.contact_messages ENABLE ROW LEVEL SECURITY;

-- Drop any existing policies to avoid conflicts from previous attempts
DROP POLICY IF EXISTS "Public can submit contact forms" ON public.contact_messages;
DROP POLICY IF EXISTS "Allow anonymous contact form submissions" ON public.contact_messages;
DROP POLICY IF EXISTS "Allow public contact form submissions" ON public.contact_messages;
DROP POLICY IF EXISTS "Anyone can create contact messages" ON public.contact_messages;
DROP POLICY IF EXISTS "Admins can manage contact messages" ON public.contact_messages;
DROP POLICY IF EXISTS "Admins can manage all messages" ON public.contact_messages;

-- Create a new, single policy to allow anonymous users to insert messages
CREATE POLICY "Public can submit contact forms"
  ON public.contact_messages
  FOR INSERT
  TO anon, authenticated
  WITH CHECK (true);

-- Create a policy that allows admins to perform any action on the messages
-- This policy assumes a function `is_admin()` or a 'role' column in a 'profiles' table.
-- Using a simplified check that assumes an admin role in a profiles table.
CREATE POLICY "Admins can manage all messages"
  ON public.contact_messages
  FOR ALL
  TO authenticated
  USING ( (EXISTS ( SELECT 1 FROM profiles WHERE (profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))) );